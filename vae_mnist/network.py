import tensorflow as tffrom tensorflow import kerasfrom tensorflow.keras import layersimport numpy as npimport matplotlib.pyplot as pltclass Sampling(layers.Layer):    def call(self, inputs):        mean, var = inputs        batch = tf.shape(mean)[0]        dim = tf.shape(mean)[1]        eps = tf.keras.backend.random_normal(shape=(batch, dim))        return mean + tf.exp(0.5 * var) * eps# Building encoderlatent_dim = 2encoder_inputs = keras.Input(shape=(28, 28))x = layers.LSTM(64, use_bias = True, )(encoder_inputs)x = layers.Dense(32, activation="relu")(x)mean = layers.Dense(latent_dim, name="mean")(x)var = layers.Dense(latent_dim, name="var")(x)z = Sampling()([mean, var])encoder = keras.Model(encoder_inputs, [mean, var, z], name="encoder")# Building decoder   latent_inputs = keras.Input(shape=(latent_dim,))x = layers.Dense(7 * 7 * 128, activation="relu")(latent_inputs)x = layers.Reshape((7, 7, 128))(x)x = layers.Conv2DTranspose(64, 3, activation="relu", strides=2, padding="same")(x)x = layers.Conv2DTranspose(32, 3, activation="relu", strides=2, padding="same")(x)decoder_outputs = layers.Conv2DTranspose(1, 3, activation="sigmoid", padding="same")(x)decoder = keras.Model(latent_inputs, decoder_outputs, name="decoder")# Autoencoder classclass auto_encoder(keras.Model):    def __init__(self, encoder, decoder, **kwargs):        super(auto_encoder, self).__init__(**kwargs)        self.encoder = encoder        self.decoder = decoder        # VAE objectvae = auto_encoder(encoder, decoder)# Defining loss functionsdef ce_loss_fn (original, generated):  ce_loss = keras.losses.binary_crossentropy(tf.reshape(original, (-1,28,28,1)), generated)  ce_loss = tf.reduce_mean(tf.reduce_sum(ce_loss, axis = (1,2)))  return ce_lossdef kl_loss_fn (var, mean):  kl_loss = -0.5 * (1 + var - tf.square(mean) - tf.exp(var))  kl_loss = tf.reduce_mean(tf.reduce_sum(kl_loss, axis = 1))  return kl_lossdef loss (original, generated, var, mean):  kl = kl_loss(var, mean)  ce = ce_loss(original, generated)  return kl + ce